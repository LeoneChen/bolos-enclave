/*******************************************************************************
*   BOLOS Enclave
*   (c) 2017 Ledger
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
********************************************************************************/

enclave {
    from "SGXSanRTEnclave.edl" import *;
    from "sgx_tkey_exchange.edl" import *;
    include "sgx_key_exchange.h"

    trusted {
        public sgx_status_t initRA(int openPSESession, [out] sgx_ra_context_t *ra_context);
        public uint32_t getAttestationKeyRA(sgx_ra_context_t ra_context, int keyIndex, [out, size=response_size] uint8_t *response, uint32_t response_size);
        public uint32_t setPersonalizationKeyRA(sgx_ra_context_t ra_context, [in, size=data_size] uint8_t* data, uint32_t data_size);
        public sgx_status_t closeRA(sgx_ra_context_t ra_context);        

        public uint32_t createPersistentContext([out, size=response_size] uint8_t* response, uint32_t response_size);
		public uint32_t setPersistentContext([in, size=context_size] uint8_t* context, uint32_t context_size);	  
		public uint32_t getPersistentContext([out, size=context_size] uint8_t* context, uint32_t context_size);
		public uint32_t isPersistentContextDirty();
		public void clearPersistentContextDirty();
        public uint32_t exchange([in, size=command_size] uint8_t* command, uint32_t command_size, [out, size=response_size] uint8_t* response, uint32_t response_size);  
    };

    untrusted {
        void debug([in, string] const char *str);   
		void debugChar(char ch); 
    };
};
